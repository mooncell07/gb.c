{% import "flag_macro.jinja" as fm %}
{% for instr in instructions %}
{{ instr.f_modifiers }} {{ instr.f_return_type }} {{ instr.f_name }}({{ instr.f_params }}) {
    uint8_t r1 = {{ instr.rhs }};
    {% if (instr.kind == "RR") or (instr.kind == "RRA") %}uint8_t result = (r1 >> 1) | ({{ instr.c_op }} << 7);
    {% elif (instr.kind == "RL") or (instr.kind == "RLA") %}uint8_t result = (r1 << 1) | {{ instr.c_op }};
    {% elif (instr.kind == "RLC") or (instr.kind == "RLCA") %}uint8_t result = rotateLeftBits(r1, 1) | {{ instr.c_op }} >> 7;
    {% elif (instr.kind == "RRC") or (instr.kind == "RRCA") %}uint8_t result = rotateRightBits(r1, 1) | (0x80 & {{ instr.c_op }});
    {% elif instr.kind == "SLA" %}uint8_t result = r1 << 1;
    {% elif instr.kind == "SRL" %}uint8_t result = r1 >> 1;
    {% elif instr.kind == "SRA" %}uint8_t result = (r1 >> 1) | (r1 & 0x80);
    {% elif instr.kind == "SWAP" %}uint8_t result = rotateLeftBits(r1, 4);
    {% elif instr.kind == "SET" %}uint8_t result = setBit(r1, {{ instr.lhs }});
    {% elif instr.kind == "RES" %}uint8_t result = clearBit(r1, {{ instr.lhs }});
    {% elif instr.kind == "BIT" %}uint8_t result = BT(r1, {{ instr.lhs }});
    {% endif %}{% if instr.write_back != False %}{{ instr.write_back }};{% endif %}
    {{ fm.gen_flags(instr) }}
}
{% endfor %}
